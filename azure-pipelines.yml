# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

jobs:
- job: iOS
  timeoutInMinutes: 120
  pool:
    vmImage: 'macos-12'

  steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '7.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
  
    - task: CmdLine@2
      displayName: 'dotnet workload install maui'
      inputs:
        script: 'dotnet workload install maui'

    # To manually select a Xamarin SDK version on the Microsoft-hosted macOS agent,
    # configure this task with the *Mono* version that is associated with the
    # Xamarin SDK version that you need, and set the "enabled" property to true.
    # See https://go.microsoft.com/fwlink/?linkid=871629
    # - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_12_0
    #   displayName: 'Select the Xamarin SDK version'
    #   enabled: false
        
    - task: NuGetToolInstaller@1

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/MauiAppReproiOS16ReleaseBuildIssue.sln'        

    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: 'ApachetaDistribution_2024.p12'
        certPwd: '$(certificatePassword)'
        keychain: 'temp'
        deleteCert: true

    - task: InstallAppleProvisioningProfile@1
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'ApachetaDistributionSpring.mobileprovision'
        removeProfile: true

    - task: Bash@3
      displayName: Build iOS App
      inputs:
        targetType: 'inline'
        script: |          
          dotnet publish -f net7.0-ios -c Release -r ios-arm64 /p:ArchiveOnBuild=true /p:CodesignKey="iPhone Distribution: APACHETA CORPORATION" /p:CodesignProvision="ApachetaDistribution.Spring"

    - task: CopyFiles@2
      inputs:
        Contents: |
          **/*.app
          **/*.ipa
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true                

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'ipas - Ad-Hoc'
        publishLocation: 'Container'
